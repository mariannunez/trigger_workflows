# This is a basic workflow to help you get started with Actions

name: CI

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
    inputs:
      cli_params:
        description: 'Run tests by cli-params'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - name: Print current branch
        run: git branch
      - name: Get PR Number
        id: pr
        run: echo "::set-output name=pr_number::$(git branch | grep 'HEAD detached at pull' | sed 's/.*pull\/\([0-9]*\)\/.*/\1/' | cut -f1 -d'/')"
      - name: Print PR Number
        run: echo "The PR number is ${{ steps.pr.outputs.pr_number }}"
      #- name: Dispatch to workflows
        #run: |
            #curl -H "Accept: application/vnd.github+json" \
            #-H "Authorization: Bearer ${{ secrets.DISPATCH_TOKEN }}" \
            #--request POST \
             #https://api.github.com/repos/MarianaNun/postman-test/dispatches \
            #--data '{"event_type": "some_event", "client_payload": { "foo": "bar", "BAR": "foo" }}'
  
#      - name: Dispatch an action and get the run ID
#        uses: codex-/return-dispatch@v1
#        id: return_dispatch
#        with:
#          token: ${{ secrets.DISPATCH_TOKEN }}
#          ref: main
#          repo: postman-test
#          owner: MarianaNun
#          workflow: dispatch_event.yml
#          workflow_inputs: { "foo": "bar", "BAR": "foo" }
#          workflow_timeout_seconds: 300

#      - name: Use the output run ID
#        run: echo ${{steps.return_dispatch.outputs.run_id}}

      - name: Dispatch an action and get the run ID
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
         owner: MarianaNun
         repo: postman-test
         github_token: ${{ secrets.DISPATCH_TOKEN }}
         workflow_file_name: dispatch_event.yml
         ref: main
         wait_interval: 10
         client_payload: '{"foo": "bar", "BAR": "https://rails-teespring-${{ steps.pr.outputs.pr_number }}"}'
         propagate_failure: false
         trigger_workflow: true
         wait_workflow: true
